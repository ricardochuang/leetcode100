package com.zjx.leetcode13;

import java.util.Stack;

public class Num227 {
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.calculate("1*2-3/4+5*6-7*8+9/10"));
    }
}

class Solution {
    public int calculate(String s) {
        s = s.replaceAll(" ","");
        char[] chars = s.toCharArray();
        Stack<Integer> numStack = new Stack<>();
        Stack<Character> oprStack = new Stack<>();

        for (int i = 0; i < chars.length; i++) {
            if (chars[i] >= '0' && chars[i] <= '9'){
                int res = 0;
                while (chars[i] >= '0' && chars[i] <= '9'){
                    res = res * 10 + (chars[i] - '0');
                    if (i + 1 <chars.length) i++;
                    else break;
                }
                numStack.push(res); //判断多位数
            }
            if (chars[i] == '+' || chars[i] == '-'){
                oprStack.push(chars[i]);
            }
            if (chars[i] == '*' || chars[i] == '/'){
                int num1 = numStack.pop();
                int res;
                if (chars[i] == '*'){
                    i++;
                    int all = 0;
                    while (chars[i] >= '0' && chars[i] <= '9'){
                        all = all * 10 + (chars[i] - '0');
                        if (i + 1 <chars.length) i++;
                        else break;
                    }
                    res = all * num1;
                    numStack.push(res);
                    if(i != chars.length - 1) i--;
                }
                if (chars[i] == '/'){
                    i++;
                    int all = 0;
                    while (chars[i] >= '0' && chars[i] <= '9'){
                        all = all * 10 + (chars[i] - '0');
                        if (i + 1 <chars.length) i++;
                        else break;
                    }
                    res = num1 / all;
                    numStack.push(res);
                    if(i != chars.length - 1) i--;
                }
            }
        }
        if (oprStack.size() == 1){
            int num1 = numStack.pop();
            int num2 = numStack.pop();
            char opr = oprStack.pop();
            int res;
            if (opr == '+'){
                res = num2 + num1;
                numStack.push(res);
            }
            if (opr == '-'){
                res = num2 - num1;
                numStack.push(res);
            }
            return numStack.pop();
        }
        else {
            Stack<Integer> numStackRes = new Stack<>();
            Stack<Character> oprStackRes = new Stack<>();
            while (!numStack.isEmpty()){
                numStackRes.push(numStack.pop());
            }
            while (!oprStack.isEmpty()){
                oprStackRes.push(oprStack.pop());
            }
            System.out.println(oprStackRes);
            System.out.println(numStackRes);
            while (numStackRes.size() > 1){
                int num1 = numStackRes.pop();
                int num2 = numStackRes.pop();
                char opr = oprStackRes.pop();
                int res;
                if (opr == '+'){
                    res = num1 + num2;
                    numStackRes.push(res);
                }
                if (opr == '-'){
                    res = num1 - num2;
                    numStackRes.push(res);
                }

            }
            return numStackRes.pop();
        }

    }
}


想了一个非常蠢的方法，用栈实现的。

class Solution {
    public int calculate(String s) {
        Stack<Integer> stack = new Stack<>();
        s = s.replaceAll(" ", "");
        char[] chars = s.toCharArray();
        int n = chars.length;
        int num = 0;
        char preSign = '+';
        for (int i = 0; i < n; i++) {
            if (Character.isDigit(chars[i])){
                num = num * 10 + chars[i] - '0';
            }
            if (!Character.isDigit(chars[i]) || i == n - 1){
                if (preSign == '+') stack.push(num);
                if (preSign == '-') stack.push(-num);
                if (preSign == '*') stack.push(num * stack.pop());
                if (preSign == '/') stack.push(stack.pop() / num);
                num = 0;
                preSign = chars[i];
            }
        }
        int res = 0;
        while (!stack.isEmpty()){
            res += stack.pop();
        }
        return res;
    }
}

之前加一个“+”的想法好厉害！！！
不过想一想，其实之前那个计算器也是这样实现的。
