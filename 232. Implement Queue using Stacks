class MyQueue {
    //Stack是FILO，现在要实现的是一个FIFO的Queue
    Stack<Integer> s1; //s1用来入Queue
    Stack<Integer> s2; //s2用来出Queue
    /** Initialize your data structure here. */
    public MyQueue() {
        s1 = new Stack<>();
        s2 = new Stack<>();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        s1.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if (!s2.isEmpty()) return s2.pop();
        //把s1中的所有数字pop出，放到s2中，就实现了反序
        while (!s1.isEmpty()){
            s2.push(s1.pop());
        }
        return s2.pop();
    }

    /** Get the front element. */
    public int peek() {
        if (!s2.isEmpty()) return s2.peek();
        while (!s1.isEmpty()){
            s2.push(s1.pop());
        }
        return s2.peek();

    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}

用一个输入栈，一个输出栈。
有存入就先如输入站，有pop/peek就去输出栈里面找。
输出栈为空则反向从输入栈进入即可
