解法一： 暴力
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Double> list = new ArrayList<>();
        for (double i : nums1) {
            list.add(i);
        }
        for (double i : nums2) {
            list.add(i);
        }
        Collections.sort(list);
        Object[] resArray = list.toArray();
        int length = resArray.length;
        if ((length % 2) == 1) return (double)resArray[length / 2];
        else return ((double)resArray[length / 2] + (double)resArray[length / 2 - 1]) / 2;
    }
}

解法二：优于解法一的暴力
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] num = new int[nums1.length + nums2.length];
        merge(num, nums1, nums2);
        int l = num.length;
        if (l % 2 == 0) return (num[(l - 1)/ 2] + num[l / 2]) / 2.0;
        else  return num[l / 2] * 1.0;
    }
    public void merge(int[] num, int[] nums1, int[] nums2){
        int i = 0, j = 0, k = 0;
        while (i < nums1.length && j < nums2.length){
            if (nums1[i] <= nums2[j]){
                num[k] = nums1[i];
                i++;
            }else {
                num[k] = nums2[j];
                j++;
            }
            k++;
        }
        while (i < nums1.length){
            num[k] = nums1[i];
            i++;
            k++;
        }
        while (j < nums2.length){
            num[k] = nums2[j];
            j++;
            k++;
        }
    }
}

解法三：利用二分法的思路完成，对a数组进行二分。
因为我们只需要找到数组中间的数字，因此可以对一个数组进行二分。
最终的目标是找到的位置恰好满足aLeft小于bRight（因为我们可以确定aLeft一定是小于aRight）且bLeft小于aRight。
若a和b数组相加有奇数个元素，则只需返回左侧的最大值（从aLeft和bLeft中取相对大一点的）
若a和b数组相加有偶数个元素，则还需找到右侧的最小值（从aRight和bRight中取相对小一点的）
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
       int m = nums1.length, n = nums2.length;
        //确保m永远是小的
       if (m > n) return findMedianSortedArrays(nums2, nums1);
       //极端情况
       if (m == 0){
           if (n % 2 == 0) return (nums2[(n - 1)/ 2] + nums2[n / 2]) / 2.0;
           else return nums2[n / 2] * 1.0;
       }
       int half = (m + n + 1) / 2;
       boolean even = ((m + n) % 2) == 0;

       int start = 0;
       int end = m;
       int aPart = 0;
       int bPart = 0;
       while (start <= end){
           aPart = (start + end) / 2;
           bPart = half - aPart;

           //如果aPartLeft大于bPartRight的话，说明插入寻找标记的位置太靠后了，需要向前找
           if (aPart > start && nums1[aPart - 1] > nums2[bPart]) end = aPart - 1;

           //如果aPartRight小于bPartLeft的话，说明入寻找标记的位置太靠前了，需要向后找
           else if(aPart < end && nums1[aPart] < nums2[bPart - 1]) start = aPart + 1;
           else {
               int leftMax = 0;
               if (aPart == 0) leftMax = nums2[bPart - 1]; //说明a中的最小数都比b中最大数要大，那么bPartLeft就是左侧的最大
               else if(bPart == 0) leftMax = nums1[aPart - 1]; //说明b中最小数大于a中最大数，那么aPartLeft就是左侧最大
               else leftMax = Math.max(nums1[aPart - 1], nums2[bPart - 1]); //以上都不满足的话，左侧的最大就是从a和b的左侧中选个最大出来
               if (!even) return leftMax * 1.0; //如果一共是奇数个数字，直接返回左侧最大就行

               int minRight = 0;
               if (aPart == m) minRight =nums2[bPart]; //说明a的最大小于b的最小，那么右侧最小就是bPartRight
               else if (bPart == n) minRight = nums1[aPart]; //说明a的最小大于b的最大，那么右侧最小就是aPartRight
               else minRight = Math.min(nums2[bPart], nums1[aPart]); //否则就要从两个右侧找最小
               return (leftMax + minRight) / 2.0;
           }
       }
       return 0.0;
    }
}
