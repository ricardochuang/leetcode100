解法一： 暴力
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        List<Double> list = new ArrayList<>();
        for (double i : nums1) {
            list.add(i);
        }
        for (double i : nums2) {
            list.add(i);
        }
        Collections.sort(list);
        Object[] resArray = list.toArray();
        int length = resArray.length;
        if ((length % 2) == 1) return (double)resArray[length / 2];
        else return ((double)resArray[length / 2] + (double)resArray[length / 2 - 1]) / 2;
    }
}

解法二：优于解法一的暴力
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] num = new int[nums1.length + nums2.length];
        merge(num, nums1, nums2);
        int l = num.length;
        if (l % 2 == 0) return (num[(l - 1)/ 2] + num[l / 2]) / 2.0;
        else  return num[l / 2] * 1.0;
    }
    public void merge(int[] num, int[] nums1, int[] nums2){
        int i = 0, j = 0, k = 0;
        while (i < nums1.length && j < nums2.length){
            if (nums1[i] <= nums2[j]){
                num[k] = nums1[i];
                i++;
            }else {
                num[k] = nums2[j];
                j++;
            }
            k++;
        }
        while (i < nums1.length){
            num[k] = nums1[i];
            i++;
            k++;
        }
        while (j < nums2.length){
            num[k] = nums2[j];
            j++;
            k++;
        }
    }
}
